#!/usr/bin/perl
use warnings;
use strict;
use feature ':5.10';

=pod

=head1 NAME

github_protect_branch - set up protected branch rules on an existing repo

=head1 SYNOPSIS

    $ export GITHUB_TOKEN=TOKEN
    $ export GITHUB_HOST=github.example.com
    $ github_protect_branch [-t token] [-o org] -r repo_name [-u user] [-s status_check] [-v]

    # EXAMPLES

    # Set up branch protection so that only commits with status_checks
    # 'ci/unit' and 'ci/functional' can be pushed/merged to master
    $ github_protect_branch -o my_org -r my_repo -s 'ci/unit' -s 'ci/functional'

    # Set up branch protection so that only 'tflint' and 'cnandor' can push/merge to master
    $ github_protect_branch -o my_org -r my_repo -u tflint -u cnandor

=head1 DESCRIPTION

Given a repo name and a list of statuses and/or users, sets up branch protection for the master branch of that repo.

NOT TESTED on GitHub.com, only on GitHub Enterprise.  Due to lack of API support, this unfortunately directly hits web endpoints with form manipulation.


=head1 REQUIREMENTS

=over 4

=item * Create personal access token on GitHub with necessary scopes for given endpoints (L<https://github.example.com/settings/tokens>).

You can save the token in the environment variable C<$GITHUB_TOKEN>, or pass it in the command line with C<-t>.

=item * Only works on repos that already have at least one commit on the master branch.

=back

=head1 OPTIONS

=over 4

=item B<-h|--help>

Prints brief help message and exits.

=item B<-V|--version>

Prints version and exits.

=item B<-t|--token>

Personal access token to use GitHub API.  Can use environment variable C<$GITHUB_TOKEN> instead.

=item B<-H|--host>

Hostname of your GitHub Enterprise host e.g. github.example.com.  Can use environment variable C<$GITHUB_HOST> instead.

=item B<-r|--repo>

GitHub repo to protect.

=item B<-o|--org>

GitHub organization in which the repo is located.

=item B<-u|--user>

Restrict pushing/merging to master to this user.

=over 4

=item * B<Replaces> existing users with user(s) supplied to the command

=item * Specify multiple -u options to specify multiple users

=back

=item B<-s|--status_check>

Disallow pushing/merging to master unless the status_check(s) are present on the commit.

=over 4

=item * B<Replaces> existing status checks with check(s) supplied to the command

=item * Specify multiple -s options to specify multiple status checks

=item * If the status check doesn't exist, it will be created

=back

=item B<-v|--verbose>

Outputs the HTTP request and response to STDERR (so that you can get the output and still process the content with C<jq>).  One C<-v> shows just the headers, while two shows the content as well.

=back


=head1 COPYRIGHT AND LICENSE

Copyright 2016, Marchex.

This library is free software; you may redistribute it and/or modify it under the same terms as Perl itself.

=cut

BEGIN {
    use FindBin '$Bin';
    use lib "$Bin/../lib/perl";
}

use Pod::Usage;

use Marchex::Client::GitHub;

my $gh = init();

protect_branch();

sub protect_branch {
    return unless $gh->{status_check};

    # Set up $patch_data to enable protection
    my $patch_data = {
        protection  => {
            enabled => JSON::XS::true(),
        }
    };

    # If requested, set status check enforcement
    if ($gh->{status_check}) {
        $patch_data->{required_status_checks} = {
            # For now, make the rule apply to everyone
            include_admins      => JSON::XS::true(),
            strict              => JSON::XS::true(),
            contexts            => $gh->{status_check}
        };
    }
    else {
        $patch_data->{required_status_checks} = undef;
    }

    # If requested, add users with push access
    if ($gh->{user}) {
        $patch_data->{restrictions} = {
            users => $gh->{user},
            teams => []
        };
    }
    else {
        $patch_data->{restrictions} = undef;
    }

    eval { $gh->{api}->command(
        PUT => "/repos/$gh->{org}/$gh->{repo}/branches/master/protection",
        $patch_data,
        { accept_type => 'application/vnd.github.loki-preview+json' }
    ) };
    die "Cannot set branch protection for $gh->{repo}: $@; exiting" if $@;

    print "Added status_check(s) " . join(", ", @{$gh->{status_check}}) , " requirements to master on $gh->{repo}.\n"
        if $gh->{status_check};

    print "Granted " . join(", ", @{$gh->{user}}) , " access to push to master on $gh->{repo}.\n"
        if $gh->{user};
}

sub init {
    my $gh = Marchex::Client::GitHub->init(
        'o|org=s'               => 'org',
        'r|repo=s'              => 'repo',
        'u|user=s@'             => 'user',
        's|status_check=s@'     => 'status_check',
    );

    pod2usage(-verbose => 1, -message => "no GitHub org provided\n")
        unless $gh->{org};

    pod2usage(-verbose => 1, -message => "no repo name provided\n")
        unless $gh->{repo};

    pod2usage(-verbose => 1, -message => "nothing to do - please specify one or both of user or status_checks\n")
        unless $gh->{user} || $gh->{status_check};

    return($gh);
}
