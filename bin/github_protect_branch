#!/usr/bin/perl
use warnings;
use strict;
use feature ':5.10';

=pod

=head1 NAME

github_protect_branch - set up protected branch rules on an existing repo

=head1 SYNOPSIS

    $ export GITHUB_TOKEN=TOKEN
    $ export GITHUB_HOST=github.example.com
    $ github_protect_branch [-t token] -o org -r repo_name [-u user] [-T team] [-s status_check] [-v]

    # EXAMPLES

    # Set up branch protection so that only commits with status_checks
    # 'ci/unit' and 'ci/functional' can be pushed/merged to master
    $ github_protect_branch -o my_org -r my_repo -s 'ci/unit' -s 'ci/functional'

    # Set up branch protection so that only 'tflint' and 'cnandor', and CX team,
    # can push/merge to master
    $ github_protect_branch -o my_org -r my_repo -u tflint -u cnandor -T call-experience

=head1 DESCRIPTION

Given a repo name and users, teams, or status checks, sets up branch protection for the master branch of that repo.


=head1 REQUIREMENTS

=over 4

=item * Requires GitHub.com or GitHub Enterprise 2.7 (L<https://developer.github.com/enterprise/2.7/v3/repos/branches/> and L<https://developer.github.com/enterprise/2.7/v3/repos/statuses/>).

=item * Create personal access token on GitHub with necessary scopes for given endpoints (L<https://github.example.com/settings/tokens>).

You can save the token in the environment variable C<$GITHUB_TOKEN>, or pass it in the command line with C<-t>.

=item * Only works on repos that already have at least one commit on the master branch.

=back

B<NOTE>: this replaces existing protections with the specified protections.  So if you have user B<A> and B<B> set with protection permissions, and status checks B<C> and B<D> are required, and run the command with user B<E> and no status checks, B<A>, B<B>, B<C>, and B<D> will all be overwritten.

=head1 OPTIONS

=over 4

=item B<-h|--help>

Prints brief help message and exits.

=item B<-V|--version>

Prints version and exits.

=item B<-t|--token>

Personal access token to use GitHub API.  Can use environment variable C<$GITHUB_TOKEN> instead.

=item B<-H|--host>

Hostname of your GitHub Enterprise host e.g. github.example.com.  Can use environment variable C<$GITHUB_HOST> instead.

=item B<-r|--repo>

GitHub repo to protect.

=item B<-o|--org>

GitHub organization, or user, in which the repo is located. (Note: only org repos, not user repos, can have user and team restrictions.)

=item B<-u|--user>

Restrict pushing/merging to master to this user.  (Can specify multiple users with multiple C<-u> options.)

=item B<-T|--team>

Restrict pushing/merging to master to this team.  (Can specify multiple teams with multiple C<-T> options.)

(Note: team needs to have access in the repo's "Collaborators & teams" settings to be added here.)

=item B<-s|--status_check>

Disallow pushing/merging to master unless the specified status_check contexts are satisfied on the commit.  (Can specify multiple checks with multiple C<-s> options.  If the status check doesn't exist, it will be created.)

B<NOTE>: A check can be any string, but if you use strange (e.g., unicode/high-bit) characters, there may be unexpected results (including strings not matching, and even the UI page breaking).  We're too lazy to make it work properly with arbitrary inputs, so we convert all strings to ASCII.

=item B<-v|--verbose>

Outputs the HTTP request and response to STDERR (so that you can get the output and still process the content with C<jq>).  One C<-v> shows just the headers, while two shows the content as well.

=back


=head1 COPYRIGHT AND LICENSE

Copyright 2016, Marchex.

This library is free software; you may redistribute it and/or modify it under the same terms as Perl itself.

=cut

BEGIN {
    use FindBin '$Bin';
    use lib "$Bin/../lib/perl";
}

use Encode;
use Pod::Usage;
use Marchex::Client::GitHub;

my $gh = init();

exit protect_branch();

sub protect_branch {
    return unless $gh->{status_check};

    # enable protection
    my $patch_data = {
        protection  => {
            enabled => JSON::XS::true(),
        }
    };

    # If requested, set status check enforcement
    if ($gh->{status_check}) {
        $patch_data->{required_status_checks} = {
            # For now, make the rule apply to everyone, and do 'strict' merges
            include_admins      => JSON::XS::true(),
            strict              => JSON::XS::true(),
            contexts            => $gh->{status_check}
        };
    }
    else {
        $patch_data->{required_status_checks} = undef;
    }

    # If requested, add users/teams with push access
    if ($gh->{user} || $gh->{team}) {
        $patch_data->{restrictions} = {
            users => $gh->{user} || [],
            teams => $gh->{team} || []
        };
    }
    else {
        $patch_data->{restrictions} = undef;
    }

    my $result = eval { $gh->{api}->command(
        PUT => "/repos/$gh->{org}/$gh->{repo}/branches/master/protection",
        $patch_data,
        { accept_type => 'application/vnd.github.loki-preview+json' }
    ) };
    die "Cannot set branch protection for $gh->{repo}: $@; exiting" if $@;
    print "Successfully set up branch protection for $gh->{org}/$gh->{repo}\n";

    # verify results
    my $err = 0;
    $err = 1 if check_result(
        'status_check', $result->{required_status_checks}{contexts}
    );

    $err = 1 if check_result(
        'user', $result->{restrictions}{users}, 'login'
    );

    $err = 1 if check_result(
        'team', $result->{restrictions}{teams}, 'slug'
    );

    return $err;
}

sub check_result {
    my($key, $res, $map_key) = @_;

    my $err = 0;
    my $req = $gh->{$key};
    if ($req) {
        my @arr = $map_key
            ? ( map { $_->{$map_key} } @$res )
            : @$res;

        for my $value (@{$req}) {
            unless (grep { lc $_ eq lc $value } @arr) {
                warn sprintf "### '%s' %s not added\n", $value, $key;
                $err ||= 1;
            }
        }
    }

    return $err;
}

sub init {
    my $gh = Marchex::Client::GitHub->init(
        'o|org=s'               => 'org',
        'r|repo=s'              => 'repo',
        'u|user=s@'             => 'user',
        'T|team=s@'             => 'team',
        's|status_check=s@'     => 'status_check',
    );

    pod2usage(-verbose => 1, -message => "no GitHub org provided\n")
        unless $gh->{org};

    pod2usage(-verbose => 1, -message => "no repo name provided\n")
        unless $gh->{repo};

    pod2usage(-verbose => 1, -message => "nothing to do - please specify a user, team, or status_check\n")
        unless $gh->{user} || $gh->{team} || $gh->{status_check};

    fix_inputs($gh);

    return($gh);
}


# convert strings to ASCII because other strings are prone to breakage
# patches for UTF8, or something, welcome
sub fix_inputs {
    my($gh) = @_;
    for my $key (qw(status_check)) {
        if ($gh->{$key}) {
            for my $val (@{$gh->{$key}}) {
                $val = encode('ascii', $val);
            }
        }
    }
}
