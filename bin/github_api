#!/usr/bin/perl
use warnings;
use strict;
use feature ':5.10';

=pod

=head1 NAME

github_api - use the GitHub API for GitHub.com / GitHub Enterprise


=head1 SYNOPSIS

    $ export GITHUB_TOKEN=TOKEN
    $ export GITHUB_HOST=github.example.com
    $ github_api [-t token] [-m http_method] [-a accept_type] \
      ([-d post_key=value [-d ...]] | [-j JSON]) [-v] /api/method


=head1 DESCRIPTION

You must use the correct version of the documentation for your GitHub version, which is currently:

    # GitHub.com
    https://developer.github.com/v3/

    # GitHub Enterprise
    https://developer.github.com/enterprise/2.6/v3/


=over 4

=item * Result JSON is printed to STDOUT

=back


=head1 REQUIREMENTS

=over 4

=item * Create personal access token on GitHub with necessary scopes for given endpoints (L<https://github.example.com/settings/tokens>).

You can save the token in the environment variable C<$GITHUB_TOKEN>, or pass it in the command line with C<-t>.  Optionally, can provide user name and password.

=back


=head1 OPTIONS

=over 4

=item B<-h|--help>

Prints brief help message and exits.

=item B<-V|--version>

Prints version and exits.

=item B<-t|--token>

Personal access token to use GitHub API.  Can use environment variable C<$GITHUB_TOKEN> instead.

=item B<--username>

Username for GitHub.  Prefer using a token instead.

=item B<--password>

Prompt for GitHub password.  Prefer using a token instead.

=item B<-H|--host>

Hostname of your GitHub Enterprise host e.g. github.example.com.  Can use environment variable C<$GITHUB_HOST> instead.

=item B<-m|--method>

HTTP method to use, default is I<GET>.

=item B<-a|--accept_type>

Optional accept-type, default is I<application/vnd.github.v3+json>.

=item B<-a|--content_type>

Optional content-type, default is I<application/json>.

=item B<-d|--data>

Parameter data, formatted as C<key=value>.

=item B<-j|--json>

Parameter data in a JSON string.  If no string provided, pass in via STDIN. Overrides C<-d>.  Implies C<-m POST>, unless otherwise specified.

=item B<-F|--no_follow>

There's pagination in some API calls.  You can see it in the C<Link> header.  If the API call returns a list and has a C<Link> header, the program will attempt to follow the links and return all the data, unless C<-F> is set.

=item B<--create_token>

Create and return an API token, using the provided string as the token's "note" in the UI, to explain what the token is for.  This note must be unique.

The token will be saved in C<~/.github-api-tools-token>, and you can set it in your environment with C<export GITHUB_TOKEN=$(cat ~/.github-api-tools-token)>.  If C<GITHUB_TOKEN> is not set in your environment, github-api-tools will attempt to load the token from this file.

=item B<--token_scopes>

A comma-separated list of scopes.  By default, all known scopes are used.

=item B<-v|--verbose>

Outputs the HTTP request and response to STDERR (so that you can get the output and still process the content with C<jq>).  One C<-v> shows just the headers, while two shows the content as well.

=back


=head1 COPYRIGHT AND LICENSE

Copyright 2016, Marchex.

This library is free software; you may redistribute it and/or modify it under the same terms as Perl itself.

=cut


BEGIN {
    use FindBin '$Bin';
    use lib "$Bin/../lib/perl";
}

use JSON::XS 'encode_json';
use Pod::Usage;
use Marchex::Client::GitHub;

my $gh = init();
my %options;
$options{accept_type}  = $gh->{accept_type}  if $gh->{accept_type};
$options{content_type} = $gh->{content_type} if $gh->{content_type};
$options{no_follow}    = $gh->{no_follow};

binmode STDOUT, ':encoding(UTF-8)';

if (defined $gh->{create_token}) {
    $gh->{http_method} = 'POST';
    $gh->{api_method}  = 'authorizations';

    my $scopes = $gh->{token_scopes}
        ? [split ',', $gh->{token_scopes}]
        : [qw(
            repo admin:org admin:public_key admin:repo_hook admin:org_hook gist
            notifications user delete_repo admin:pre_receive_hook admin:gpg_key
        )];

    $gh->{params} = encode_json({
        note    => $gh->{create_token} || 'github-api-tools token',
        scopes  => $scopes
    });
}

my $output = $gh->{api}->command(
    $gh->{http_method} => $gh->{api_method}, $gh->{params}, \%options
);

if (defined $gh->{create_token}) {
    my $file = "$ENV{HOME}/.github-api-tools-token";
    if (-f $file) {
        warn "Will not write to $file; already exists\n";
    }
    else {
        open my $fh, '>', $file or die "Cannot write to $file: $!\n";
        print $fh $output->{token};
        close $fh;
        chmod 0600, $file;
        say "Wrote token to $file; you may include in your environment with:";
        say "  export GITHUB_TOKEN=\$(cat $file)";
        say "Go to https://github.marchex.com/settings/tokens/$output->{id} to modify token";
    }
}
else {
    print $gh->{api}->pretty($output), "\n";
}

exit;

sub init {
    my $gh = Marchex::Client::GitHub->init(
        'o|org=s'               => 'org',
        'm|method=s'            => 'http_method',
        'a|accept_type=s'       => 'accept_type',
        'c|content_type=s'      => 'content_type',
        'd|data=s@'             => 'data',
        'j|json:s'              => 'json',
        'F|no_follow'           => 'no_follow',
        '--create_token:s'      => 'create_token',
        '--token_scopes=s'      => 'token_scopes'
    );

    if (defined $gh->{json}) {
        $gh->{http_method} ||= 'POST';
        if ($gh->{json}) {
            $gh->{params} = $gh->{json};
        }
        else {
            $gh->{params} = join '', <STDIN>;
        }
    }
    elsif ($gh->{data}) {
        $gh->{params} = +{ map { split /=/, $_, 2 } @{$gh->{data} || []} };
    }

    $gh->{http_method} ||= 'GET';

    $gh->{api_method} = shift @ARGV;
    @ARGV = ();

    pod2usage(-verbose => 1, -message => "No method specified\n")
        unless $gh->{api_method} or defined $gh->{create_token};

    return($gh);
}
