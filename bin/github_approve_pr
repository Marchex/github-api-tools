#!/usr/bin/perl
use warnings;
use strict;
use feature ':5.10';

=pod

=head1 NAME

github_approve_pr - approve a pull request from the command line


=head1 SYNOPSIS

    $ export GITHUB_TOKEN=TOKEN
    $ export GITHUB_HOST=my.github.com
    $ github_approve_pr my_org/my_repo 1


=head1 REQUIREMENTS

=over 4

=item * Create personal access token on GitHub with necessary scopes for given endpoints (L<https://my-github-host.com/settings/tokens>).

You can save the token in the environment variable C<$GITHUB_TOKEN>, or pass it in the command line with C<-t>.

=back


=head1 OPTIONS

=over 4

=item B<-h|--help>

Prints brief help message and exits.

=item B<-t|--token>

Personal access token to use GitHub API.  Can use environment variable
C<$GITHUB_TOKEN> instead.

=item B<-H|--Host>

Hostname of your GitHub Enterprise host e.g. github.myorg.com
C<$GITHUB_HOST> instead.

=back

=cut


BEGIN {
    use FindBin '$Bin';
    use lib "$Bin/../lib/perl";
}

use Pod::Usage;
use HTTP::Response;
use JSON::XS qw(decode_json encode_json);
use MIME::Base64;
use URI::Escape;

use Marchex::Client::GitHub;
use Marchex::Color qw(color_str :colors);

my $gh = init();

my $last_sha;
my $pr = "$gh->{repo}/pulls/$gh->{pr_num}";
my $commits = $gh->{api}->command(GET => "/repos/$pr/commits");
for my $commit (@$commits) {
    print color_str("commit $commit->{sha}", YELLOW), "\n";
    print "Author: $commit->{commit}{committer}{name} <$commit->{commit}{committer}{email}>\n";
    print "Date: $commit->{commit}{author}{date}\n";
    my $message = $commit->{commit}{message};
    $message =~ s/^/    /;
    $message =~ s/\n/\n    /g;
    $message =~ s/\s+$//g;
    print "\n$message\n\n";

    $last_sha = $commit->{sha};
}


local $|;
print color_str("Approve pull request", BLUE), ' ',
      color_str($pr, RED), color_str('?', BLUE), ' [Yes/No/Skip] ';
chomp(my $ans = <>);
if ($ans =~ /^[yY]/) {
    print "Approved!\n\n";
    status($last_sha, 'success');
}
elsif ($ans =~ /^[nN]/) {
    print "Denied!\n\n";
    status($last_sha, 'failure');
}
else {
    status($last_sha, 'pending');
}

exit;

sub status {
    my($sha, $state) = @_;
    my %args = (
        state       => $state || 'error',
        description => "Reviewed-by: $gh->{user}",
        context     => $gh->{context}
    );
    $args{target_url} = $gh->{target_url} if $gh->{target_url};
    $gh->{api}->command(POST => "/repos/$gh->{repo}/statuses/$sha", \%args);
}

sub init {
    my $gh = Marchex::Client::GitHub->init(
        'u|target_url=s'        => 'target_url',
        'c|context=s'           => 'context',
    );

    (@{$gh}{qw(repo pr_num user)}) = @ARGV;
    $gh->{user}         //= $ENV{USER};
    $gh->{context}      //= 'reviewed';
    @ARGV = ();

    return($gh);
}
